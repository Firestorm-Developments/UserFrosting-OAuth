<?php
namespace UserFrosting\OAuth;

require_once('OAuthController.php');
require_once('OAuthUser.php');
require_once('OAuthUserLoader.php');

// TODO: Let Composer autoload all our classes

use UserFrosting as UF;


// Fetch the relevant controller
function getProviderController($provider,$callback_page,$app){
    switch ($provider) {
        case "linkedin" : 
            require_once('OAuthControllerLinkedIn.php');
            
            return new \UserFrosting\OAuth\OAuthControllerLinkedIn($app,$callback_page);
        
        default:          
//            return false;
            $app->notFound();
    }
}

/* Import UserFrosting variables as global Twig variables */    
$twig = $app->view()->getEnvironment();   

$loader = $twig->getLoader();
// First look in user's theme...
$loader->addPath($app->config('plugins.path') . "/UserFrosting-OAuth/templates");

// Innitialize the OAuth User Loader the table and column definitions will be loaded
OAuthUserLoader::init();

// Define routes

//// This is the route that the provider will use as its redirect_uri
//$app->get('/oauth/:provider', function ($provider) use ($app) {
//    
//    // The provider has sent us back here.  Did we get an authorization code, or the access token?
//    $get = $app->request->get();
//    
//    // If we received an authorization code, then resume our action
//    if (isset($get['code'])) {
////print_r($get);        
//        $controller = getProviderController($provider,$app);
//        // If we're logging them in, just call that method and it will automatically redirect us
////echo("Line 42 user trying to login ".$_SESSION['oauth_action']);            
//        if ($_SESSION['oauth_action'] == "login"){
//            
//            $controller->login();
//        } else if ($_SESSION['oauth_action'] == "register"){
//            // TODO: take them to the registration confirmation page
//// SN : If it comes here it means that the we have authorization and confirmation to use
//// oauth details in registration, we sould send the control back to the rgister page 
//// and send the oauth data or keep it in session so that we can 
//// 1. use this data to pre populate the registration page fields line name, and email
//// 2. Pouplate hidden fields in the register form so that the resulting  POST route will carry
//// the fields
//// 3. After this point registration will work normally as it does today with and additional 
////    save for open auth fields using the user id generated by the new user registration 
//    $controller->pageRegister();
//        }
//    } else {
//        // Otherwise, request an authorization code
//        return $controller->authorize();
//    }
//});

// This is the GET route for the "login with ___" button
$app->get('/oauth/:provider/login', function ($provider) use ($app) {
    $controller = getProviderController($provider,'login',$app);
    // Store this action so we remember what we're doing after we get the authorization code
    $_SESSION['oauth_action'] = "login";

    $get = $app->request->get();
    // If we received an authorization code, then resume our action
    if (isset($get['code'])) {
        // If we're logging them in, just call that method and it will automatically redirect us
            $controller->login();
    } else {
        // Otherwise, request an authorization code
        return $controller->authorize();
    }
});

// This is the GET route for the "register with ___" button
$app->get('/oauth/:provider/register', function ($provider) use ($app) {
    $controller = getProviderController($provider,'register',$app);

    // Store this action so we remember what we're doing after we get the authorization code
    $_SESSION['oauth_action'] = "register";    
    $get = $app->request->get();
    
    // If we received an authorization code, then resume our action
    if (isset($get['code'])) {
//die("in register got the code");        
        
        // If OAuth call is successful and we have a code then 
        // show the updated registration page 
        $controller->pageRegister();
    } else {
        // Otherwise, request an authorization code
//die("in register trying to authorize");        
        return $controller->authorize();
    }
});

// This is the POST route that actually registers the user
$app->post('/oauth/:provider/register', function ($provider) use ($app) {
    $controller = getProviderController($provider,'register',$app);

    $controller->register();
});

// TODO: Register hooks for inserting buttons and other content into templates.  
// Will this be the same for all providers?
// 
// SN: we can call the class function in $controller to push the button, because each provider may have
// a different image or button type 

$app->hook('login.page.control', function () use ($app) {

}, 1);

$app->hook('settings.page.control', function () use ($app) {

}, 1);

$app->hook('register.page.control', function () use ($app) {

}, 1);

